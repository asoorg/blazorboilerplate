@page "/asoman"

@using BlazorBoilerplate.Shared.Dto.Sample
@inject IMatToaster matToaster
@using System.Diagnostics
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject IApiClient apiClient
@inject IStringLocalizer<Global> L


@if (asoStart == true)
{
    <div style="display:flex;justify-content:center; align-content:center; height: 100px;  ">
        <MatButton Style="font-size: xx-large; vertical-align: central; background-color:lightseagreen; width: 120px; height: 80px" tabindex="0" id="s0" OnClick="asoStartFirst">Start/شروع</MatButton>
    </div>
    <div style="display:flex;justify-content:center; align-content:center; height: 300px;  ">
        <h1 style="align-content:center;">در این تحقیق هر بار یک چهره ظاهر می شود که ممکن است هیجانی یا خنثی باشد که شما با آن کاری ندارید ولی در زیر آن چشمی را که سریعتر چشمک می زند بعد از تشخیص سریع انتخاب کنید</h1>
        <h1 style="align-content:center;">Here you see a face and blinking eyes underneath, choose the eye that blinks quicker as soon as you find out</h1>
    </div>
}


@if (samanFixShow == true)
{
    <div style="display:flex;justify-content:center; align-content:center; height: 150px; ">
        <h1 style="align-content:center;">@asoFix</h1>
    </div>
    <div style="display:flex;justify-content:center; align-content:center; height: 250px; ">
        <img x="-5" y="-5" width="100" height="100" src="@fixImage" />
    </div>
}
@if (samanStim2Show == true)
{

    <div style="display:flex;justify-content:center; align-content:center; height: 50px; ">
    </div>
    <div style="display:flex;justify-content:center; align-content:center; height: 250px;border:hidden; ">
        <img x="-5" y="-5" width="250" height="250" src="@downImage0" />
    </div>
    <div style="display:flex;justify-content:center; align-content:center; height: 100px;border:hidden;">
        <div style="display:flex;justify-content:center; align-content:center;width:125px; height: 100px;border:hidden; " @onclick="@(async() => await samanStim2Hit("0"))">
            <img x="-5" y="-5" width="125" height="100" src="@targetImageLeft" />
        </div>
        <div style="display:flex;justify-content:center; align-content:center;width:0px; height: 100px;border:hidden; ">
        </div>
        <div style="display:flex;justify-content:center; align-content:center;width:125px; height: 100px;border:hidden; " @onclick="@(async() => await samanStim2Hit("1"))">
            <img x="-5" y="-5" width="125" height="100" src="@targetImageRight" />
        </div>

    </div>

    <div style="display:flex;justify-content:center; align-content:center; height: 100px;">
        <div style="display:flex;justify-content:center; align-content:center;width:100px; height: 100px;border:hidden; " @onclick="@(async() => await samanStim2Hit("0"))">
            <img x="-5" y="-5" width="100" height="100" src="@ArrowLeft" />
        </div>
        <div style="display:flex;justify-content:center; align-content:center;width:50px; height: 100px;border:hidden; ">
        </div>
        <div style="display:flex;justify-content:center; align-content:center;width:100px; height: 100px;border:hidden; " @onclick="@(async() => await samanStim2Hit("1"))">
            <img x="-5" y="-5" width="100" height="100" src="@ArrowRight" />
        </div>
    </div>
}
@if (asoFeedbackShow == true)
{
    <div style="display:flex;justify-content:center; align-content:center; height: 100px; ">
    </div>
    <div style="display:flex;justify-content:center; align-content:center; height: 300px;">
        @if (result == 1)
        {
            <img x="-5" y="-5" width="75" height="75" src="@LikeImageLeft" />
            <img x="-5" y="-5" width="75" height="75" src="@LikeImageRight" />

        }
        @if (result == 0)
        {
            <img x="-5" y="-5" width="75" height="75" src="@UnlikeImageLeft" />
            <img x="-5" y="-5" width="75" height="75" src="@UnlikeImageRight" />
        }
        @if (result == 2)
        {
            <img x="-5" y="-5" width="75" height="75" src="@UnlikeImageLeft" />
            <img x="-5" y="-5" width="75" height="75" src="@UnlikeImageLeft" />
            <img x="-5" y="-5" width="75" height="75" src="@UnlikeImageLeft" />
            <img x="-5" y="-5" width="75" height="75" src="@UnlikeImageRight" />
            <img x="-5" y="-5" width="75" height="75" src="@UnlikeImageRight" />
            <img x="-5" y="-5" width="75" height="75" src="@UnlikeImageRight" />
        }
    </div>
}



@code
{
    int leftScreen = 50;
    int topScreen = 50;
    string asoFix;
    public bool asoStart { get; set; }

    public bool asoScaleShow { get; set; }
    public bool asoFeedbackShow { get; set; }

    public bool samanFixShow { get; set; }
    public bool samanStim2Show { get; set; }

    public int asoCBMsession { get; set; }

    public int asoLocation { get; set; }

    public string value1 = "";

    //public int placeImage = -1;

    bool createUserDialogOpen = false;

    public string downImage0 = "Yes";//"_content/BlazorBoilerplate.CommonUI/images/RockPapS/rock.jpg";
    public string downImage1 = "No";//"_content/BlazorBoilerplate.CommonUI/images/RockPapS/scissors.jpg";

    public string downImage0B { get; set; }

    //public string leftImage { get; set; }
    //public string rightImage { get; set; }
    public string fixImage { get; set; }


    public string targetImageLeft { get; set; }
    public string targetImageRight { get; set; }

    public string leftImage0 { get; set; }

    public string leftImage1 { get; set; }
    public string rightImage0 { get; set; }
    public string rightImage1 { get; set; }

    public string LikeImageRight { get; set; }
    public string UnlikeImageRight { get; set; }
    public string LikeImageLeft { get; set; }
    public string UnlikeImageLeft { get; set; }

    public string targetImageLeft1 { get; set; }
    public string targetImageRight1 { get; set; }


    public string ArrowLeft { get; set; }
    public string ArrowRight { get; set; }

    public MessageDto messageDto { get; set; } = new MessageDto();

    string AsoRT = "0";
    double AsoRTcounter = 0.0;
    public int result;
    public int numLR;

    public bool delayDo { get; set; }

    public int resultHertz;

    Random randomLR = new Random(DateTime.Now.Millisecond);

    Random randomLR2 = new Random(DateTime.Now.Millisecond);

    Random randomLR3 = new Random(DateTime.Now.Millisecond);

    int asoLoop = 0;

    bool Val1 = false;

    public double ms2 = 0;
    public double ms50 = 0;
    public double ms67 = 0;

    public string asoTmp = "aso";

    Stopwatch stopwatch = new Stopwatch();

    Stopwatch stopwatch50 = new Stopwatch();

    double asoLag50 = 0;
    double asoLag67 = 0;
    int asoLooLoo = 0;
    int numRatio;

    protected override void OnInitialized()
    {
        downImage0B = "";
        asoFix = "Please Wait...";
        messageDto.Text = "";

        value1 = "Asoman2";

        asoScaleShow = false;

        samanFixShow = false;
        samanStim2Show = false;

        asoFeedbackShow = false;

        asoCBMsession = 0;
        asoStart = true;

    }
}

@code
{
    List<Todo> todos = new List<Todo>();
    public Todo todo { get; set; } = new Todo();

    // List<DbLogo> dbLogoItems;
    //string[] DebugLevels1 = { string.Empty, "Debug", "Information", "Warning", "Error" };
    //string DebugLevel1 = string.Empty;

    //private int totalItemsCount1 { get; set; } = 10;
    //public DbLogo dbLogoItem { get; set; } = new DbLogo();

    List<DbLog> dbLogItems;
    //string[] DebugLevels = { string.Empty, "Debug", "Information", "Warning", "Error" };
    //string DebugLevel = string.Empty;

    //private int totalItemsCount { get; set; } = 10;
    public DbLog dbLogItem { get; set; } = new DbLog();

    public string asoUser = "aso";
    [Inject]
    private AuthenticationStateProvider authStateProvider { get; set; }

    Task<AuthenticationState> authenticationStateTask { get; set; }

    async Task LoadMainEntitiesDb()
    {
        try
        {
            var result = await apiClient.GetLogs();
            dbLogItems = new List<DbLog>(result);
            //matToaster.Add(L["One item found", Plural.From("{0} items found", (int)result.InlineCount)], MatToastType.Success, L["Operation Successful"]);

            //await Task.Delay(5000);


        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }

        await Task.Delay(5000);
        await InvokeAsync(StateHasChanged);

        try
        {

            //await Task.Delay(5000);

            //if ()
            //var resultLogo = await apiClient.GetLogos();
            //dbLogoItems = new List<DbLogo>(resultLogo);
            //matToaster.Add(L["One item found", Plural.From("{0} items found", (int)result.InlineCount)], MatToastType.Success, L["Operation Successful"]);

        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }
    }

    async Task asoStartFirst()
    {
        asoStart = false;
        samanFixShow = true;

        await LoadMainEntitiesDb();

        await InvokeAsync(StateHasChanged);

        var UserInfo = await ((IdentityAuthenticationStateProvider)authStateProvider).GetUserViewModel();
        if (UserInfo.IsAuthenticated)
        {
            asoUser = UserInfo.UserName.ToString();
            await InvokeAsync(StateHasChanged);
        }

        //  foreach (var message in Messages)
        //  {
        //      //cogsci*img1*0*_content/BlazorBoilerplate.Theme.Material/images/52446ed4-3cad-40f5-9daf-7019f65ba35e/0.jpg*data
        //      string asoTmpUser = message.Text.Split("*")[0];
        //      string asoTmpTask = message.Text.Split("*")[1];
        //     string asoTmpNo = message.Text.Split("*")[2];
        //     string asoTmpImg = message.Text.Split("*")[3];

        //     if (asoUser == asoTmpUser && asoTmpTask == value1)
        //     {
        //         asoCBMsession=Convert.ToInt32(asoTmpNo)+1;
        //         await InvokeAsync(StateHasChanged);
        //      }
        //  }
        await Task.Delay(1000);

        // if (asoTmpImg.Split("/")[4] == "BlackCircle.jpg")
        asoLooLoo = 0;

        //if (asoTmpImg.Split("/")[4] == "LeftUnlike.jpg")

        UnlikeImageLeft = dbLogItems[asoLooLoo].Message;

        asoLooLoo++;

        // if (asoTmpImg.Split("/")[4] == "FixHand.jpg")

        fixImage = dbLogItems[asoLooLoo].Message;

        //if (asoTmpImg.Split("/")[4] == "RightLike.jpg")

        LikeImageRight = dbLogItems[asoLooLoo+1].Message;

        //if (asoTmpImg.Split("/")[4] == "RightUnlike.jpg")

        UnlikeImageRight = dbLogItems[asoLooLoo+2].Message;

        // if (asoTmpImg.Split("/")[4] == "LeftLike.jpg")

        LikeImageLeft = dbLogItems[asoLooLoo+3].Message;
        asoLooLoo++;

        // if (asoTmpImg.Split("/")[4] == "Left1.jpg")

        leftImage1 = dbLogItems[asoLooLoo].Message;

        //if (asoTmpImg.Split("/")[4] == "Right1.jpg")

        rightImage1 = dbLogItems[asoLooLoo+1].Message; ;

        //if (asoTmpImg.Split("/")[4] == "Right2Left.jpg")

        ArrowLeft = dbLogItems[asoLooLoo+2].Message;

        // if (asoTmpImg.Split("/")[4] == "Left2Right.jpg")

        ArrowRight = dbLogItems[asoLooLoo+3].Message;

        asoLooLoo++;

        targetImageLeft1 = dbLogItems[asoLooLoo].Message;
        // if (asoTmpImg.Split("/")[4] == "WhiteCircle.jpg")

        targetImageRight1 = dbLogItems[asoLooLoo+1].Message; 
        //downIm
        //if (asoTmpImg.Split("/")[4] == "Left0.jpg")

        leftImage0 = dbLogItems[asoLooLoo+2].Message;
        //downImage1B = asoTmp1;

        // if (asoTmpImg.Split("/")[4] == "Right0.jpg")

        rightImage0 = dbLogItems[asoLooLoo+3].Message;
        asoLoop = asoLooLoo + 1;
        await Task.Delay(5000);
        asoFix = "";
        await PlayAgain();
    }

    async Task PlayAgain()
    {
        samanFixShow = true;
        await InvokeAsync(StateHasChanged);
        int numm = randomLR3.Next(1, 100);
        await InvokeAsync(StateHasChanged);

        asoLocation = 1;

        if (numm <= 25)
        {
            asoLocation = 0;
        }

        if (asoLocation == 0)
        {
            //angry
            downImage0 = dbLogItems[asoLoop].Message;//message.Message1;
                                                      //downImage0B = dbLogItems[asoLoop].Level;//.Split("*")[1];
        }

        else
        {
            //neutral
            downImage0 = dbLogItems[asoLoop+1].Message;//message.Message1;
                                                      //downImage0B = dbLogItems[asoLoop].Level;//.Split("*")[1];
        }

        // result = 0;
        //AsoRT = "0";

        int num = randomLR2.Next(1, 100);
        await InvokeAsync(StateHasChanged);

        if (num % 2 == 0)
        {
            numLR = 0;
        }
        else
        {
            numLR = 1;
        }

        await InvokeAsync(StateHasChanged);

        await Task.Delay(1000);

        delayDo = false;

        AsoRTcounter = 0;
        stopwatch.Reset();
        stopwatch.Start();
        samanFixShow = false;
        samanStim2Show = true;
        await asoDelay();

        if (delayDo == false)
        {
            await samanStim2Hit("2");
        }
    }

    async Task asoDelay()
    {
        await InvokeAsync(StateHasChanged);
        do
        {
            numRatio = randomLR.Next(1, 100);
            resultHertz = 0;
            if (numRatio <= 30)
            {
                resultHertz = 1;
            }
            await InvokeAsync(StateHasChanged);

            if (Math.Abs(resultHertz - numLR) == 0)
            {
                targetImageLeft = leftImage1;
                targetImageRight = rightImage0;
            }

            if (Math.Abs(resultHertz - numLR) == 1)
            {
                targetImageLeft = leftImage0;
                targetImageRight = rightImage1;
            }

            await InvokeAsync(StateHasChanged);
            stopwatch50.Reset();
            stopwatch50.Start();
            do
            {
                ms2 = stopwatch.Elapsed.TotalMilliseconds;
                ms50 = stopwatch50.Elapsed.TotalMilliseconds;
                await Task.Delay(1);
                await InvokeAsync(StateHasChanged);

            } while (ms2 <= 1500 && ms50 <= 50 && delayDo == false);


            targetImageLeft = leftImage0;
            targetImageRight = rightImage0;
            await InvokeAsync(StateHasChanged);
            stopwatch50.Reset();
            stopwatch50.Start();
            do
            {
                ms50 = stopwatch50.Elapsed.TotalMilliseconds;
                ms2 = stopwatch.Elapsed.TotalMilliseconds;

                await Task.Delay(1);
                await InvokeAsync(StateHasChanged);


            } while (ms2 <= 1500 && ms50 <= 67 && delayDo == false);

        } while (ms2 <= 1500 && delayDo == false);

    }

    public async Task samanStim2Hit(string asoKey)
    {
        samanStim2Show = false;

        targetImageLeft = leftImage0;
        targetImageRight = rightImage0;

        delayDo = true;
        await InvokeAsync(StateHasChanged);
        stopwatch.Stop();
        //asoTmp = asoKey;

        AsoRT = Convert.ToInt32(ms2).ToString();

        result = 2;

        if (asoKey == numLR.ToString())
        {
            result = 1;
        }

        if ((asoKey == "1" && numLR == 0) || (asoKey == "0" && numLR == 1))
        {
            result = 0;
        }
        asoFeedbackShow = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1000);

        asoFeedbackShow = false;
        // samanFixShow = true;

        //placeImage = -1;

        // messageDto.Text = downImage0B + "_" + asoLoop.ToString() + "_" + result.ToString() + "_" + (AsoRT + "    ").Substring(0, 4).Trim() + "_" + numLR.ToString() + "_" + resultHertz.ToString() + "#" + messageDto.Text;

        if (asoLoop < 103)
        {

            try
            {
                todo.Title = "," + asoUser + "," + value1 + "," + (asoCBMsession + 1).ToString() + "," + DateTime.Now + "," + (asoLoop-3).ToString() + "," + asoLooLoo.ToString() + "," + "downImage0B" + "," + asoLoop.ToString() + "," + result.ToString() + "," + AsoRT + "," + numLR.ToString() + "," + resultHertz.ToString() + ",";
                apiClient.AddEntity(todo);

                await apiClient.SaveChanges();

                // await LoadMainEntities();
            }
            catch (Exception ex)
            {
                matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Operation Failed");
            }
            todo = new Todo();

            downImage0 = "";
            downImage0B = "";

            AsoRTcounter = 0;
            asoLoop++;
            await PlayAgain();
            // asoNext = true;
        }
        else
        {
            asoStart = false;
            try
            {
                todo.Title = "," + asoUser + "," + value1 + "," + (asoCBMsession + 1).ToString() + "," + DateTime.Now + "," + (asoLoop-3).ToString() + "," + asoLooLoo.ToString() + "," + "downImage0B" + "," + asoLoop.ToString() + "," + result.ToString() + "," + AsoRT + "," + numLR.ToString() + "," + resultHertz.ToString() + ",";
                apiClient.AddEntity(todo);

                await apiClient.SaveChanges();
            }

            catch (Exception ex)

            {
                matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Error");
            }

            createUserDialogOpen = true;

            // asoNext = false;
            navigationManager.NavigateTo("");
            //return;
        }


    }



}


